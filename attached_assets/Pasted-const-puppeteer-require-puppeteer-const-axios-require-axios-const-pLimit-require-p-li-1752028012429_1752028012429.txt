const puppeteer = require('puppeteer');
const axios = require('axios');
const pLimit = require('p-limit');

// ConfiguraciÃ³n
const AUCTION_URL = 'https://northcountry.auctiontechs.com/auction-detail/174912699568418f53a4cac';
const AUCTION_ID = '174912699568418f53a4cac';
const CONCURRENCY = 5; // MÃ¡ximo 5 lotes a la vez

// Verifica si una imagen existe (status 200) sin descargarla completa
async function verificarImagen(url) {
  try {
    const res = await axios.head(url, { timeout: 5000 });
    return res.status === 200;
  } catch {
    return false;
  }
}

(async () => {
  const browser = await puppeteer.launch({
    headless: true,
    args: ['--no-sandbox']
  });
  const page = await browser.newPage();

  console.log('ðŸ“¥ Accediendo a la pÃ¡gina de la subasta...');
  await page.goto(AUCTION_URL, { waitUntil: 'networkidle2' });
  await page.waitForSelector('a[href*="/item-detail"]');

  // Scroll para cargar imÃ¡genes por lazy load
  for (let i = 0; i < 5; i++) {
    await page.evaluate(() => window.scrollBy(0, window.innerHeight));
    await new Promise(res => setTimeout(res, 500));
  }

  const lotes = await page.$$eval('a[href*="/item-detail"]', links => {
    const seen = new Set();
    return links.map(link => {
      const href = link.getAttribute('href');
      const id = href?.split('/item-detail/')[1]?.split('?')[0];
      const title = link.innerText.trim();
      const image = link.querySelector('img')?.src || '';
      if (id && !seen.has(id)) {
        seen.add(id);
        return { id, url: `https://northcountry.auctiontechs.com${href}`, title, image };
      }
      return null;
    }).filter(Boolean);
  });

  console.log(`âœ… ${lotes.length} lotes detectados en la pÃ¡gina 1.\n`);

  const limit = pLimit(CONCURRENCY);

  const resultados = await Promise.allSettled(
    lotes.map(lote => limit(async () => {
      const lotePage = await browser.newPage();
      await lotePage.goto(lote.url, { waitUntil: 'domcontentloaded' });
      await lotePage.waitForTimeout(600);

      // Extraer imÃ¡genes del carrusel
      const images = await lotePage.$$eval('.slick-track img', imgs =>
        imgs.map(i => i.src).filter(Boolean)
      );

      // Verificar imagen principal
      const imagenValida = images.length > 0 && await verificarImagen(images[0]);

      const description = await lotePage.$eval('.item-detail-body', el => el.innerText).catch(() => '');
      const title = await lotePage.$eval('.item-detail-title', el => el.innerText).catch(() => lote.title || 'Sin tÃ­tulo');

      await lotePage.close();

      if (imagenValida) {
        console.log(`âœ… Lote ${lote.id} OK - "${title}"`);
        return {
          id: lote.id,
          title,
          description,
          images,
          url: lote.url
        };
      } else {
        console.warn(`â›” Lote ${lote.id} descartado - imagen invÃ¡lida`);
        return null;
      }
    }))
  );

  const lotesValidos = resultados
    .filter(r => r.status === 'fulfilled' && r.value !== null)
    .map(r => r.value);

  console.log(`\nðŸŽ‰ Lotes finales cargados: ${lotesValidos.length}`);
  console.table(lotesValidos.map(l => ({
    id: l.id,
    fotos: l.images.length,
    title: l.title.slice(0, 50)
  })));

  await browser.close();
})();
